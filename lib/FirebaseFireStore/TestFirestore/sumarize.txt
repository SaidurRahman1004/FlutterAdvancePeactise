‡¶ï‡ßã‡¶°‡ßá‡¶∞ ‡¶¨‡¶ø‡¶∏‡ßç‡¶§‡¶æ‡¶∞‡¶ø‡¶§ ‡¶¨‡ßç‡¶Ø‡¶æ‡¶ñ‡ßç‡¶Ø‡¶æ üëá
import 'package:flutter/material.dart';             // Flutter ‡¶è‡¶∞ UI ‡¶§‡ßà‡¶∞‡¶ø‡¶∞ ‡¶ú‡¶®‡ßç‡¶Ø Material Design ‡¶≤‡¶æ‡¶á‡¶¨‡ßç‡¶∞‡ßá‡¶∞‡¶ø
import 'package:cloud_firestore/cloud_firestore.dart'; // Firestore Database ‡¶¨‡ßç‡¶Ø‡¶¨‡¶π‡¶æ‡¶∞ ‡¶ï‡¶∞‡¶æ‡¶∞ ‡¶ú‡¶®‡ßç‡¶Ø
import 'package:firebase_auth/firebase_auth.dart';     // Firebase Authentication ‡¶è‡¶∞ ‡¶ú‡¶®‡ßç‡¶Ø (User ID ‡¶≤‡¶æ‡¶ó‡¶¨‡ßá ‡¶á‡¶Æ‡ßá‡¶ú ‡¶∏‡ßá‡¶≠‡ßá)
import 'package:image_picker/image_picker.dart';       // ‡¶ó‡ßç‡¶Ø‡¶æ‡¶≤‡¶æ‡¶∞‡¶ø ‡¶•‡ßá‡¶ï‡ßá ‡¶á‡¶Æ‡ßá‡¶ú ‡¶¨‡¶æ‡¶õ‡¶æ‡¶á ‡¶ï‡¶∞‡¶æ‡¶∞ ‡¶ú‡¶®‡ßç‡¶Ø
import 'package:provider/provider.dart';               // State Management (‡¶è‡¶ñ‡¶æ‡¶®‡ßá ‡¶¨‡ßç‡¶Ø‡¶¨‡¶π‡¶æ‡¶∞ ‡¶π‡ßü‡¶®‡¶ø, ‡¶∂‡ßÅ‡¶ß‡ßÅ import ‡¶Ü‡¶õ‡ßá)
import '../../Custom Widgte/InputTextFeild.dart';      // Custom TextField widget (‡¶Ü‡¶™‡¶®‡¶æ‡¶∞ ‡¶§‡ßà‡¶∞‡¶ø ‡¶Ü‡¶≤‡¶æ‡¶¶‡¶æ Widget)
import 'package:firebase_storage/firebase_storage.dart'; // Firebase Storage ‡¶è ‡¶õ‡¶¨‡¶ø ‡¶Ü‡¶™‡¶≤‡ßã‡¶° ‡¶ï‡¶∞‡¶æ‡¶∞ ‡¶ú‡¶®‡ßç‡¶Ø
import 'dart:io';                                      // Local File handle ‡¶ï‡¶∞‡¶æ‡¶∞ ‡¶ú‡¶®‡ßç‡¶Ø

class contactListWitheFbFirestore extends StatefulWidget {  // Stateful Widget ‡¶ï‡¶æ‡¶∞‡¶£ UI ‡¶§‡ßá ‡¶°‡¶æ‡¶ü‡¶æ ‡¶™‡¶∞‡¶ø‡¶¨‡¶∞‡ßç‡¶§‡¶® ‡¶π‡¶¨‡ßá
  const contactListWitheFbFirestore({super.key});

  @override
  State<contactListWitheFbFirestore> createState() => _contactListAppState();
}

class _contactListAppState extends State<contactListWitheFbFirestore> {
  final _nameController = TextEditingController();    // ‡¶®‡¶æ‡¶Æ ‡¶á‡¶®‡¶™‡ßÅ‡¶ü ‡¶®‡ßá‡ßü‡¶æ‡¶∞ ‡¶ú‡¶®‡ßç‡¶Ø Text Controller
  final _numberController = TextEditingController();  // ‡¶®‡¶æ‡¶Æ‡ßç‡¶¨‡¶æ‡¶∞ ‡¶á‡¶®‡¶™‡ßÅ‡¶ü ‡¶®‡ßá‡ßü‡¶æ‡¶∞ ‡¶ú‡¶®‡ßç‡¶Ø Controller
  bool _isUploading = false;                          // ‡¶õ‡¶¨‡¶ø/‡¶°‡¶æ‡¶ü‡¶æ ‡¶Ü‡¶™‡¶≤‡ßã‡¶° ‡¶π‡¶ö‡ßç‡¶õ‡ßá ‡¶ï‡¶ø‡¶®‡¶æ ‡¶∏‡ßá‡¶ü‡¶æ ‡¶ü‡ßç‡¶∞‡ßç‡¶Ø‡¶æ‡¶ï ‡¶ï‡¶∞‡¶æ‡¶∞ ‡¶ú‡¶®‡ßç‡¶Ø
  File? imageSrchoice;                                // ‡¶®‡¶ø‡¶∞‡ßç‡¶¨‡¶æ‡¶ö‡¶ø‡¶§ ‡¶õ‡¶¨‡¶ø Local File ‡¶Ü‡¶ï‡¶æ‡¶∞‡ßá ‡¶∏‡ßá‡¶≠ ‡¶π‡¶¨‡ßá

‚úÖ Contact Add ‡¶ï‡¶∞‡¶æ‡¶∞ ‡¶´‡¶æ‡¶Ç‡¶∂‡¶®
  void _addContact() async {
    final name = _nameController.text.trim();          // Name field ‡¶•‡ßá‡¶ï‡ßá ‡¶á‡¶®‡¶™‡ßÅ‡¶ü ‡¶®‡ßá‡ßü‡¶æ
    final number = _numberController.text.trim();      // Number field ‡¶•‡ßá‡¶ï‡ßá ‡¶á‡¶®‡¶™‡ßÅ‡¶ü ‡¶®‡ßá‡ßü‡¶æ
    if (name.isNotEmpty && number.isNotEmpty) {        // ‡¶ñ‡¶æ‡¶≤‡¶ø ‡¶®‡¶æ ‡¶π‡¶≤‡ßá Firestore ‡¶è ‡¶∏‡ßá‡¶≠
      await FirebaseFirestore.instance.collection("ContactList").add({
        'Name': name,                                  // Name field
        'Number': number,                              // Number field
        "timestamp": FieldValue.serverTimestamp(),     // Server time, sorting ‡¶è‡¶∞ ‡¶ú‡¶®‡ßç‡¶Ø ‡¶ï‡¶æ‡¶ú‡ßá ‡¶≤‡¶æ‡¶ó‡¶¨‡ßá
      });

      _nameController.clear();                         // ‡¶á‡¶®‡¶™‡ßÅ‡¶ü ‡¶´‡¶ø‡¶≤‡ßç‡¶° clear
      _numberController.clear();
    }
  }

‚úÖ Contact Delete ‡¶´‡¶æ‡¶Ç‡¶∂‡¶®
  _deleteContact(String docId) {
    showDialog(                                        // Alert Dialog ‡¶¶‡ßá‡¶ñ‡¶æ‡¶¨‡ßá delete ‡¶ï‡¶∞‡¶æ‡¶∞ ‡¶∏‡¶Æ‡ßü
      context: context,
      builder: (_) => AlertDialog(
        title: Text("Confirmation"),                   // Dialog ‡¶è‡¶∞ Title
        content: Text("Are you sure you want to delete this contact?"),
        actions: [                                     // ‡¶¶‡ßÅ‡¶á‡¶ü‡¶æ ‡¶¨‡¶æ‡¶ü‡¶® ‚Üí Cancel & Delete
          IconButton(
            onPressed: () {
              Navigator.of(context).pop();             // Cancel ‡¶ï‡¶∞‡¶≤‡ßá dialog ‡¶¨‡¶®‡ßç‡¶ß
            },
            icon: Icon(Icons.close, color: Colors.grey),
          ),
          IconButton(
            onPressed: () async {
              await FirebaseFirestore.instance
                  .collection("ContactList")
                  .doc(docId)                           // ‡¶®‡¶ø‡¶∞‡ßç‡¶¶‡¶ø‡¶∑‡ßç‡¶ü ‡¶°‡¶ï‡ßÅ‡¶Æ‡ßá‡¶®‡ßç‡¶ü
                  .delete();                            // Delete ‡¶ï‡¶∞‡¶æ
              Navigator.of(context).pop();              // Dialog ‡¶¨‡¶®‡ßç‡¶ß
            },
            icon: Icon(Icons.delete, color: Colors.red),
          ),
        ],
      ),
    );
  }

‚úÖ Contact + Image Upload ‡¶´‡¶æ‡¶Ç‡¶∂‡¶®
  Future<void> _AddAllnNimageSelection() async {
    final name = _nameController.text.trim();          // Name ‡¶®‡ßá‡ßü‡¶æ
    final number = _numberController.text.trim();      // Number ‡¶®‡ßá‡ßü‡¶æ

    if (name.isEmpty || number.isEmpty) {              // ‡¶Ø‡¶¶‡¶ø ‡¶ñ‡¶æ‡¶≤‡¶ø ‡¶•‡¶æ‡¶ï‡ßá ‡¶§‡¶æ‡¶π‡¶≤‡ßá Error Message
      ScaffoldMessenger.of(context).showSnackBar(
        const SnackBar(
          content: Text("Name and Number cannot be empty."),
          backgroundColor: Colors.red,
        ),
      );
      return;
    }

    setState(() {
      _isUploading = true;                             // Progress bar ‡¶¶‡ßá‡¶ñ‡¶æ‡¶®‡ßã‡¶∞ ‡¶ú‡¶®‡ßç‡¶Ø true
    });

    try {
      Map<String, dynamic> noteData = {
        'Name': name,
        'Number': number,
        "timestamp": FieldValue.serverTimestamp(),
      };

      // ‡¶Ø‡¶¶‡¶ø ‡¶á‡¶Æ‡ßá‡¶ú ‡¶∏‡¶ø‡¶≤‡ßá‡¶ï‡ßç‡¶ü ‡¶ï‡¶∞‡¶æ ‡¶•‡¶æ‡¶ï‡ßá
      if (imageSrchoice != null) {
        final String fileName = DateTime.now().millisecondsSinceEpoch.toString(); // ‡¶á‡¶â‡¶®‡¶ø‡¶ï ‡¶®‡¶æ‡¶Æ
        final String filePath =
            "note_images/${FirebaseAuth.instance.currentUser!.uid}/$fileName.jpg"; // ‡¶á‡¶â‡¶ú‡¶æ‡¶∞ ‡¶Ö‡¶®‡ßÅ‡¶Ø‡¶æ‡ßü‡ßÄ ‡¶´‡ßã‡¶≤‡ßç‡¶°‡¶æ‡¶∞‡ßá ‡¶∏‡ßá‡¶≠

        await FirebaseStorage.instance.ref(filePath).putFile(imageSrchoice!);   // Storage ‡¶è ‡¶Ü‡¶™‡¶≤‡ßã‡¶°
        final downloadUrl =
        await FirebaseStorage.instance.ref(filePath).getDownloadURL();         // ‡¶á‡¶Æ‡ßá‡¶ú‡ßá‡¶∞ Public URL

        noteData['imageUrl'] = downloadUrl;                                    // Firestore ‡¶°‡¶æ‡¶ü‡¶æ‡ßü imageUrl ‡¶´‡¶ø‡¶≤‡ßç‡¶° ‡¶Ø‡ßã‡¶ó
      }

      await FirebaseFirestore.instance.collection("ContactList").add(noteData); // Firestore ‡¶è save

      _nameController.clear();
      _numberController.clear();
      imageSrchoice = null;                                                    // ‡¶∏‡¶¨ Reset

      if (mounted) {
        ScaffoldMessenger.of(context).showSnackBar(
          const SnackBar(
            content: Text("Added Successfully"),
            backgroundColor: Colors.green,
          ),
        );
      }
    }  catch (e) {                                                             // Error ‡¶π‡¶≤‡ßá
      if (mounted) {
        ScaffoldMessenger.of(context).showSnackBar(
          SnackBar(
            content: Text("Failed to upload Contact: $e"),
            backgroundColor: Colors.red,
          ),
        );
      }
    } finally {
      if (mounted) {
        setState(() {
          _isUploading = false;                                                // Uploading ‡¶∂‡ßá‡¶∑
        });
      }
    }
  }

‚úÖ ‡¶á‡¶Æ‡ßá‡¶ú Pick ‡¶ï‡¶∞‡¶æ‡¶∞ ‡¶´‡¶æ‡¶Ç‡¶∂‡¶®
  Future<void> _pickImage() async {
    final ImagePicker pickimg = ImagePicker();            // ImagePicker instance
    final XFile? pickedImage = await pickimg.pickImage(
      source: ImageSource.gallery,                        // ‡¶ó‡ßç‡¶Ø‡¶æ‡¶≤‡¶æ‡¶∞‡¶ø ‡¶•‡ßá‡¶ï‡ßá ‡¶á‡¶Æ‡ßá‡¶ú ‡¶®‡ßá‡ßü‡¶æ
    );

    if (pickedImage  == null) return;                     // ‡¶Ø‡¶¶‡¶ø ‡¶á‡¶â‡¶ú‡¶æ‡¶∞ ‡¶ï‡¶ø‡¶õ‡ßÅ ‡¶®‡¶æ ‡¶¨‡ßá‡¶õ‡ßá ‡¶®‡ßá‡ßü
    setState(() {
      imageSrchoice = File(pickedImage.path);             // Local file ‡¶è ‡¶∏‡ßá‡¶≠
    });
  }

‚úÖ UI ‡¶Ö‡¶Ç‡¶∂
  @override
  Widget build(BuildContext context) {
    return Scaffold(
      appBar: PreferredSize(                               // Custom Height AppBar
        preferredSize: Size.fromHeight(100),
        child: ClipRRect(                                  // Rounded corner AppBar
          borderRadius: BorderRadius.only(
            topLeft: Radius.circular(20),
            topRight: Radius.circular(20),
          ),
          child: AppBar(
            title: Text("Contact List"),
            centerTitle: true,
            backgroundColor: Colors.blueGrey,
            foregroundColor: Colors.white,
          ),
        ),
      ),

‚úÖ ‡¶á‡¶®‡¶™‡ßÅ‡¶ü ‡¶´‡¶∞‡ßç‡¶Æ (Name, Number, Image Select, Add Button)
      body: Column(
        children: [
          Padding(
            padding: EdgeInsets.all(16.0),
            child: Column(
              children: [
                if (_isUploading) const LinearProgressIndicator(),  // Upload progress ‡¶¶‡ßá‡¶ñ‡¶æ‡¶¨‡ßá
                SizedBox(height: 10),
                CustomTextField(controller: _nameController, labelText: "Name"),  // Name input
                SizedBox(height: 10),
                CustomTextField(
                  controller: _numberController,
                  keyboardType: TextInputType.phone,
                  labelText: "Number",                                            // Number input
                ),
                SizedBox(height: 10,),
                if(imageSrchoice != null)                                        // ‡¶Ø‡¶¶‡¶ø image select ‡¶ï‡¶∞‡¶æ ‡¶π‡ßü preview ‡¶¶‡ßá‡¶ñ‡¶æ‡¶¨‡ßá
                    Container(
                      height: 100,
                      width: 100,
                      margin: const EdgeInsets.symmetric(vertical: 10),
                      decoration: BoxDecoration(
                        image: DecorationImage(
                          image: FileImage(imageSrchoice!),                     // Local image preview
                          fit: BoxFit.cover,
                        ),
                        borderRadius: BorderRadius.circular(8),
                      ),
                    ),
                OutlinedButton.icon(                                            // Image Pick Button
                  onPressed: _pickImage,
                  icon: const Icon(Icons.image),
                  label: const Text("Select Image"),
                ),
                SizedBox(height: 10),
                ElevatedButton(                                                 // Add Button
                  onPressed: _isUploading ? null : _AddAllnNimageSelection,
                  child: Text("Add "),
                ),
              ],
            ),
          ),

‚úÖ Firestore ‡¶•‡ßá‡¶ï‡ßá Live Contact List ‡¶¶‡ßá‡¶ñ‡¶æ‡¶®‡ßã
          Expanded(
            child: StreamBuilder(
              stream: FirebaseFirestore.instance
                  .collection("ContactList")                  // ContactList collection ‡¶•‡ßá‡¶ï‡ßá Data ‡¶Ü‡¶®‡¶¨‡ßá
                  .orderBy("timestamp", descending: true)     // ‡¶∏‡¶Æ‡ßü ‡¶Ö‡¶®‡ßÅ‡¶∏‡¶æ‡¶∞‡ßá ‡¶∏‡¶æ‡¶ú‡¶æ‡¶®‡ßã
                  .snapshots(),                               // Live update (Realtime Listener)
              builder: (_, snapshot) {
                if (!snapshot.hasData) {
                  return Center(child: CircularProgressIndicator());  // Data ‡¶®‡¶æ ‡¶Ü‡¶∏‡¶æ ‡¶™‡¶∞‡ßç‡¶Ø‡¶®‡ßç‡¶§ ‡¶≤‡ßã‡¶°‡¶ø‡¶Ç
                }
                return ListView.builder(                              // List ‡¶Ü‡¶ï‡¶æ‡¶∞‡ßá ‡¶¶‡ßá‡¶ñ‡¶æ‡¶¨‡ßá
                  itemCount: snapshot.data!.docs.length,
                  itemBuilder: (_, index) {
                    final docData = snapshot.data!.docs[index].data() as Map<String, dynamic>;
                    final imageUrl = docData.containsKey('imageUrl') ? docData['imageUrl'] as String? : null;

                    return Card(
                      elevation: 5,
                      child: ListTile(
                        leading: imageUrl != null && imageUrl.isNotEmpty
                            ? ClipRRect(                                // ‡¶Ø‡¶¶‡¶ø image ‡¶•‡¶æ‡¶ï‡ßá thumbnail ‡¶¶‡ßá‡¶ñ‡¶æ‡¶¨‡ßá
                          borderRadius: BorderRadius.circular(8),
                          child: Image.network(
                            imageUrl,
                            width: 50,
                            height: 50,
                            fit: BoxFit.cover,
                          ),
                        )
                            : CircleAvatar(                             // ‡¶®‡¶æ ‡¶•‡¶æ‡¶ï‡¶≤‡ßá ‡¶™‡ßç‡¶∞‡¶•‡¶Æ ‡¶Ö‡¶ï‡ßç‡¶∑‡¶∞
                          child: Text(docData['Name'][0]),
                        ),
                        title: Text(docData["Name"]),                    // Contact Name
                        subtitle: Text(docData["Number"] ?? ""),         // Contact Number
                        trailing: Icon(Icons.call, color: Colors.blue),  // Call Icon
                        onLongPress: () => _deleteContact(snapshot.data!.docs[index].id), // Long press ‡¶è delete
                      ),
                    );
                  },
                );
              },
            ),
          ),
        ],
      ),
    );
  }
}

üîé ‡¶∏‡¶æ‡¶∞‡¶∏‡¶Ç‡¶ï‡ßç‡¶∑‡ßá‡¶™‡ßá (What this project does)

‡¶è‡¶á ‡¶™‡ßç‡¶∞‡¶ú‡ßá‡¶ï‡ßç‡¶ü‡¶ü‡¶æ ‡¶π‡¶≤‡ßã ‡¶è‡¶ï‡¶ü‡¶ø Contact List App with Firebase Integration‡•§

üëâ ‡¶è‡¶ñ‡¶æ‡¶®‡ßá ‡¶Ø‡¶æ ‡¶π‡¶ö‡ßç‡¶õ‡ßá:

Contact Add ‡¶ï‡¶∞‡¶æ ‡¶Ø‡¶æ‡ßü (Name + Number + Optional Image ‡¶∏‡¶π)‡•§

Image Picker ‡¶¶‡¶ø‡ßü‡ßá ‡¶ó‡ßç‡¶Ø‡¶æ‡¶≤‡¶æ‡¶∞‡¶ø ‡¶•‡ßá‡¶ï‡ßá ‡¶õ‡¶¨‡¶ø ‡¶¨‡¶æ‡¶õ‡¶æ‡¶á ‡¶ï‡¶∞‡¶æ ‡¶Ø‡¶æ‡ßü‡•§

‡¶õ‡¶¨‡¶ø Firebase Storage ‡¶è ‡¶Ü‡¶™‡¶≤‡ßã‡¶° ‡¶π‡ßü ‚Üí Firestore ‡¶è ‡¶∏‡ßá‡¶á URL ‡¶∏‡ßá‡¶≠ ‡¶π‡ßü‡•§

Realtime Firestore Listener (StreamBuilder) ‡¶¨‡ßç‡¶Ø‡¶¨‡¶π‡¶æ‡¶∞ ‡¶ï‡¶∞‡ßá Contact List Live Update ‡¶π‡ßü‡•§

‡¶Æ‡¶æ‡¶®‡ßá ‡¶®‡¶§‡ßÅ‡¶® Contact ‡¶¶‡¶ø‡¶≤‡ßá ‡¶∏‡¶æ‡¶•‡ßá ‡¶∏‡¶æ‡¶•‡ßá UI ‡¶§‡ßá ‡¶¶‡ßá‡¶ñ‡¶æ‡¶¨‡ßá‡•§

Delete ‡¶ï‡¶∞‡¶≤‡ßá UI ‡¶•‡ßá‡¶ï‡ßá ‡¶∏‡¶æ‡¶•‡ßá ‡¶∏‡¶æ‡¶•‡ßá ‡¶ö‡¶≤‡ßá ‡¶Ø‡¶æ‡¶¨‡ßá‡•§

‡¶™‡ßç‡¶∞‡¶§‡¶ø‡¶ü‡¶ø ‡¶ï‡¶®‡ßç‡¶ü‡¶æ‡¶ï‡ßç‡¶ü ‡¶ï‡¶æ‡¶∞‡ßç‡¶°‡ßá ‚Üí ‡¶®‡¶æ‡¶Æ, ‡¶®‡¶æ‡¶Æ‡ßç‡¶¨‡¶æ‡¶∞, ‡¶õ‡¶¨‡¶ø (‡¶®‡¶æ ‡¶•‡¶æ‡¶ï‡¶≤‡ßá ‡¶®‡¶æ‡¶Æ‡ßá‡¶∞ ‡¶™‡ßç‡¶∞‡¶•‡¶Æ ‡¶Ö‡¶ï‡ßç‡¶∑‡¶∞), ‡¶Ü‡¶∞ ‡¶è‡¶ï‡¶ü‡¶æ Call Icon ‡¶•‡¶æ‡¶ï‡ßá‡•§

Long Press ‡¶ï‡¶∞‡¶≤‡ßá ‡¶ï‡¶®‡ßç‡¶ü‡¶æ‡¶ï‡ßç‡¶ü Delete ‡¶π‡ßü‡•§

Upload ‡¶ï‡¶∞‡¶æ‡¶∞ ‡¶∏‡¶Æ‡ßü Progress Bar ‡¶¶‡ßá‡¶ñ‡¶æ‡¶¨‡ßá‡•§

üëâ ‡¶Ö‡¶∞‡ßç‡¶•‡¶æ‡ßé, ‡¶è‡¶ü‡¶æ ‡¶è‡¶ï‡¶ü‡¶æ Firebase ‡¶≠‡¶ø‡¶§‡ßç‡¶§‡¶ø‡¶ï CRUD Project (Create, Read, Delete + Image Upload)‡•§