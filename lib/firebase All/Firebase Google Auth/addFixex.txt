import 'package:flutter/material.dart';
import 'package:cloud_firestore/cloud_firestore.dart';
import 'package:firebase_auth/firebase_auth.dart';
import 'package:provider/provider.dart';
import '../../Custom Widgte/InputTextFeild.dart';

/*
void main() {
  runApp(const MaterialApp(
    debugShowCheckedModeBanner: false,
    home: contactListWitheFbFirestore(),
  ));
}

 */

class contactListWitheFbFirestore extends StatefulWidget {
  const contactListWitheFbFirestore({super.key});

  @override
  State<contactListWitheFbFirestore> createState() => _contactListAppState();
}

class _contactListAppState extends State<contactListWitheFbFirestore> {
  final _nameController = TextEditingController();
  final _numberController = TextEditingController();
  final String? currentUserId = FirebaseAuth.instance.currentUser?.uid; // বর্তমান ইউজারের UID নিন

  //contact add function r
  void _addContact() async {
    final name = _nameController.text.trim();
    final number = _numberController.text.trim();
    if (name.isNotEmpty && number.isNotEmpty  && currentUserId != null) {
      //Save in FireBase FireStore
      await FirebaseFirestore.instance.collection("ContactList").add({
        'Name': name,
        'Number': number,
        'userId': currentUserId,
        "timestamp": FieldValue.serverTimestamp(),
      });

      _nameController.clear();
      _numberController.clear();
    }
  }

  //delet Contact
  _deleteContact(String docId) {
    showDialog(
      context: context,
      builder: (_) => AlertDialog(
        title: Text("Confirmation"),
        content: Text("Are you sure you want to delete this contact?"),
        actions: [
          IconButton(
            onPressed: () {
              Navigator.of(context).pop();
            },
            icon: Icon(Icons.close, color: Colors.grey),
          ),
          IconButton(
            onPressed: () async {
              await FirebaseFirestore.instance
                  .collection("ContactList")
                  .doc(docId)
                  .delete();
              Navigator.of(context).pop();
            },
            icon: Icon(Icons.delete, color: Colors.red),
          ),
        ],
      ),
    );
  }

  @override
  Widget build(BuildContext context) {
    return Scaffold(
      appBar: PreferredSize(
        preferredSize: Size.fromHeight(100),
        child: ClipRRect(
          borderRadius: BorderRadius.only(
            topLeft: Radius.circular(20),
            topRight: Radius.circular(20),
          ),
          child: AppBar(
            title: Text("Contact List"),
            centerTitle: true,
            backgroundColor: Colors.blueGrey,
            foregroundColor: Colors.white,
          ),
        ),
      ),
      body: Column(
        children: [
          Padding(
            padding: EdgeInsets.all(16.0),
            child: Column(
              children: [
                CustomTextField(controller: _nameController, labelText: "Name"),
                SizedBox(height: 10),
                CustomTextField(
                  controller: _numberController,
                  keyboardType: TextInputType.phone,
                  labelText: "Number",
                ),
                SizedBox(height: 10),
                ElevatedButton(
                  onPressed: () {
                    _addContact();
                  },
                  child: Text("Add "),
                  style: ElevatedButton.styleFrom(
                    backgroundColor: Colors.blueGrey,
                    foregroundColor: Colors.white,
                    minimumSize: const Size(double.infinity, 40),
                    shape: RoundedRectangleBorder(
                      borderRadius: BorderRadius.circular(5),
                    ),
                  ),
                ),
              ],
            ),
          ),
          Expanded(
            child: StreamBuilder(
              stream: FirebaseFirestore.instance
                  .collection("ContactList").where("userId", isEqualTo: FirebaseAuth.instance.currentUser?.uid)                     //.where() কোয়েরিটি Firestore-কে বলছে: "ContactList কালেকশন থেকে শুধুমাত্র সেই ডকুমেন্টগুলো দাও, যেগুলোর userId ফিল্ডের মান বর্তমানে লগইন করা ব্যবহারকারীর UID-এর সমান।"
                  .orderBy("timestamp", descending: true)
                  .snapshots(),
              builder: (_, snapshot) {
                if (!snapshot.hasData) {
                  return Center(child: CircularProgressIndicator());
                }
                return ListView.builder(
                  itemCount: snapshot.data!.docs.length,
                  itemBuilder: (_, index) {
                    final dataControl = snapshot.data!.docs[index];
                    return Card(
                      elevation: 5,
                      child: ListTile(
                        leading: CircleAvatar(
                          backgroundColor: Colors.blueGrey,
                          foregroundColor: Colors.white,
                          child: Text(dataControl['Name'][0],style: const TextStyle(fontWeight: FontWeight.bold),),
                        ),
                        title: Text(dataControl["Name"]),
                        subtitle: Text(dataControl["Number"]??""),
                        trailing: Icon(Icons.call, color: Colors.blue),
                        onLongPress: () =>
                        _deleteContact( dataControl.id ),
                      ),
                    );
                  },
                );
              },
            ),
          ),
        ],
      ),
    );
  }
}
/////////////////////////////////////////////////////

কী কী অসাধারণ হয়েছে (Strengths):
চমৎকার আর্কিটেকচার: আপনি AuthGate, একটি প্রোফাইল বা ওয়েলকাম স্ক্রিন (homecontactG), এবং মূল কন্টাক্ট লিস্ট (contactListWitheFbFirestore)-কে আলাদা করে খুবই পরিষ্কার এবং শক্তিশালী একটি আর্কিটেকচার তৈরি করেছেন। এটি খুবই প্রফেশনাল একটি অ্যাপ্রোচ।

ইউজার প্রোফাইল তৈরি (Firestore-এ): এটি আপনার কাজের সবচেয়ে প্রশংসনীয় অংশ। signUp() করার সময় আপনি শুধু Firebase Auth-তেই ইউজার তৈরি করেননি, বরং সেই ইউজারের uid ব্যবহার করে Firestore-এর RegUsers কালেকশনে একটি আলাদা ডকুমেন্টও তৈরি করেছেন। এই প্যাটার্নটি (Auth + User Profile Document) বাস্তব পৃথিবীর প্রায় সব বড় অ্যাপেই ব্যবহৃত হয়।

রিয়েল-টাইম প্রোফাইল ভিউ: homecontactG স্ক্রিনে আপনি StreamBuilder ব্যবহার করে নির্দিষ্ট ইউজারের ডকুমেন্ট (.doc(currentUser!.uid).snapshots()) থেকে রিয়েল-টাইমে ডেটা দেখিয়েছেন। এটি Firestore-এর একটি শক্তিশালী ব্যবহার।

গুগল সাইন-ইন প্রচেষ্টা: যদিও আপনি গুগল সাইন-ইন বাটনটি henüz পুরোপুরি কানেক্ট করেননি, কিন্তু এর পেছনের সম্পূর্ণ লজিক (SigninGoogle ফাংশন) লিখে রেখেছেন। এই অ্যাডভান্সড টপিক নিজে থেকে চেষ্টা করার জন্য আপনাকে সাধুবাদ।

ভালো UX: কন্টাক্ট ডিলিট করার আগে কনফার্মেশন ডায়ালগ দেখানোটা প্রমাণ করে যে আপনি শুধুমাত্র কোডিং করছেন না, বরং ব্যবহারকারীর অভিজ্ঞতা নিয়েও ভাবছেন।

একটিমাত্র কিন্তু সবচেয়ে গুরুত্বপূর্ণ উন্নতির জায়গা:
আপনি প্রায় সবকিছুই সঠিকভাবে করেছেন, শুধু একটি মূল পয়েন্ট বাকি আছে, যা ছিল এই প্র্যাকটিস টাস্কের প্রধান উদ্দেশ্য।

ডেটা মালিকানা (Data Ownership) - প্রত্যেক ব্যবহারকারীর ডেটা আলাদা করা।

সমস্যা:
আপনার অ্যাপের বর্তমান ভার্সনে, যেকোনো একজন ব্যবহারকারী যখন একটি নোট/কন্টাক্ট তৈরি করে, সেটি ContactList কালেকশনে সেভ হয়। কিন্তু অন্য কোনো ব্যবহারকারী লগইন করলেও তিনি আগের ব্যবহারকারীর তৈরি করা সব নোট দেখতে পাচ্ছেন। এর কারণ হলো, আমরা এখনও নোটগুলোকে তাদের নিজ নিজ মালিকের (ব্যবহারকারীর) সাথে সংযুক্ত করিনি। Firestore জানে না কোন নোটটি কোন ইউজারের।

সমাধান (মাত্র দুটি ছোট পরিবর্তন):

পদক্ষেপ ১: নোট সেভ করার সময় userId যোগ করা (contact_store.dart)
_addContact ফাংশনটিকে একটু পরিবর্তন করে কন্টাক্টের সাথে বর্তমান ইউজারের UID যোগ করে দিন।

Dart

// contact_store.dart -> _addContact() ফাংশনের ভেতরে

void _addContact() async {
  final name = _nameController.text.trim();
  final number = _numberController.text.trim();
  final String? currentUserId = FirebaseAuth.instance.currentUser?.uid; // বর্তমান ইউজারের UID নিন

  if (name.isNotEmpty && number.isNotEmpty && currentUserId != null) {
    //Save in FireBase FireStore
    await FirebaseFirestore.instance.collection("ContactList").add({
      'Name': name,
      'Number': number,
      "timestamp": FieldValue.serverTimestamp(),
      'userId': currentUserId, // <-- এই লাইনটি যোগ করুন
    });

    _nameController.clear();
    _numberController.clear();
  }
}
পদক্ষেপ ২: শুধুমাত্র নিজের নোটগুলো দেখানো (contact_store.dart)
এখন, StreamBuilder-এর কোয়েরিটি পরিবর্তন করে Firestore-কে বলুন যেন সে শুধুমাত্র বর্তমান ইউজারের নোটগুলোই পাঠায়।

Dart

// contact_store.dart -> body-এর StreamBuilder-এর ভেতরে

// ...
Expanded(
  child: StreamBuilder(
    stream: FirebaseFirestore.instance
        .collection("ContactList")
        .where('userId', isEqualTo: FirebaseAuth.instance.currentUser?.uid) // <-- এই .where() কোয়েরিটি যোগ করুন
        .orderBy("timestamp", descending: true)
        .snapshots(),
    builder: (_, snapshot) {
      // ... বাকি কোড একই থাকবে
    },
  ),
),
// ...
এই .where() কোয়েরিটি Firestore-কে বলছে: "ContactList কালেকশন থেকে শুধুমাত্র সেই ডকুমেন্টগুলো দাও, যেগুলোর userId ফিল্ডের মান বর্তমানে লগইন করা ব্যবহারকারীর UID-এর সমান।"

এই দুটি পরিবর্তন করার পরেই আপনার অ্যাপটি একটি পূর্ণাঙ্গ মাল্টি-ইউজার অ্যাপে পরিণত হবে, যেখানে প্রত্যেক ব্যবহারকারীর ডেটা সম্পূর্ণ সুরক্ষিত এবং আলাদা থাকবে।